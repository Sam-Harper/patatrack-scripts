#! /usr/bin/env python

import sys
import os

from multirun import *


if __name__ == "__main__":
  if not 'CMSSW_BASE' in os.environ:
    # FIXME print a meaningful error message
    sys.exit(1)

  # TODO parse arguments and options from the command line
  if len(sys.argv) > 1:
    config = sys.argv[1]
    process = parseProcess(config)
  else:
    # FIXME print a meaningful error message
    sys.exit(1)

  # options passed to multiCmsRun
  options = {
    'verbose'             : False,
    'plumbing'            : False,
    'warmup'              : True,
    'events'              : 4200,
    'repeats'             : 4,
    'jobs'                : 2,
    'threads'             : None,   # overridden by the scan
    'streams'             : None,   # if None, set to the number of threads for each step of the scan
    'gpus_per_job'        : 1,
    'allow_hyperthreading': True,
    'set_cpu_affinity'    : True,
    'set_gpu_affinity'    : True,
  }

  # options specific to scan
  min_threads =  6      # minimum is 1
  max_threads = 12      # None to guess based on the number of available cores (or threads) and concurrent jobs

  # print a system overview
  info()

  # save scan results to 'scan.csv'
  scan = open('scan.csv', 'w', 1)
  header = True

  if max_threads is None:
    cpus = get_cpu_info()
    if options['allow_hyperthreading']:
      count = sum(len(cpu.hardware_threads) for cpu in cpus.values())
    else:
      count = sum(len(cpu.physical_processors) for cpu in cpus.values())
    max_threads = count // options['jobs']

  for threads in range(min_threads, max_threads + 1):
    if options['streams'] is not None:
      multiCmsRun(process, **dict(options, threads = threads, data = scan, header = header))
    else:
      multiCmsRun(process, **dict(options, threads = threads, streams = threads, data = scan, header = header))
    # warm up only once
    options['warmup'] = False
    header = False

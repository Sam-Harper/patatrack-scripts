#! /usr/bin/env python

import sys
import os
import copy

from multirun import *
import FWCore.ParameterSet.Config as cms


if __name__ == "__main__":
  if not 'CMSSW_BASE' in os.environ:
    # FIXME print a meaningful error message
    sys.exit(1)

  if len(sys.argv) == 1:
    # FIXME print a meaningful error message
    sys.exit(1)

  # TODO parse arguments and options from the command line
  options = {
    'verbose'             : False,
    'plumbing'            : False,
    'warmup'              : True,
    'events'              : 4200,
    'repeats'             : 4,
    'jobs'                : 1,
    'threads'             : 8,          # per job
    'streams'             : 8,          # per job
    'gpus_per_job'        : 1,          # per job
    'allow_hyperthreading': False,      # this has no effect if set_cpu_affinity is False
    'set_cpu_affinity'    : True,
    'set_gpu_affinity'    : True,
    'logdir'              : None,       # relative or absolute path, or None to disable storing the logs
  }

  run_io_benchmark = True

  info()

  for config in sys.argv[1:]:
    process = parseProcess(config)

    if run_io_benchmark:
      print 'Benchmarking only I/O'
      io = copy.deepcopy(process)
      io.hltGetRaw = cms.EDAnalyzer("HLTGetRaw", RawDataCollection = cms.InputTag("rawDataCollector"))
      io.path = cms.Path(io.hltGetRaw)
      io.schedule = cms.Schedule(io.path)
      multiCmsRun(io, **options)
      run_io_benchmark = False

    print 'Benchmarking %s' % config
    multiCmsRun(process, **options)
